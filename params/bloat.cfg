# control bloat by varying the probabilities of removal/addition of neurons and connections in the population
[mutations]
# how to measure bloat
# time: evaluation+evolution time in seconds by generation
# connections: average number of connections by generation
bloat_type = time

# start simplifying above this limit (either seconds or #connections, according to ${limit_by})
upper_limit = 2.5

# reset to default mutations values below this limit (either seconds or #connections, according to ${limit_by})
# optional (default = ${upper_limit})
lower_limit = 2.3

# amount by which to increase/decrease the  mutation rates for removal/insertion of a neuron 
# (as a percentage of the sum of the mutations rates for insertion and removal of a neuron)
mut_neurons_delta = 0.5

# amount by which to increase/decrease the  mutation rates for removal/insertion of a connection 
# (as a percentage of the sum of the mutations rates for insertion and removal of a connection)
mut_connections_delta = 0.5

# update every ${frequency} generations
# optional (default = 1)
frequency = 5

# control bloat by adjusting each individual's fitness:
# fitness_adjusted = fitness/penalization(bloat)
[fitness]
# how to measure bloat
# time: evaluation time in MICROSECONDS 
# connections: network connections
bloat_type = connections

# the shape of the penalty function: 
# step: fit = step(individual bloat)
# popmax: fit = fit * (population max bloat/individual bloat)^popmax_alpha
penalty_function = step

# parameter of the popmax penalty function (]0, 1], default = 0.1)
popmax_alpha = 1

# start penalizing fitness for bloat values above this limit
lower_limit = 5

# the x-axis width of each step
# applicable if function == step
step_width = 5

# each step, increase the penalty multiplier by this ammount
# applicable if function == step
step_penalty_increase = 0.1



